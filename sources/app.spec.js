var chai = require('chai')
const expect  = require("chai").expect
const chaiHttp = require('chai-http')
const Series = require('./series/series.model.js')
const Emissoras = require('./emissoras/emissoras.model.js')
const EquipeLegendas = require('./equipelegendas/equipelegendas.model.js')

//

// Generic Spec
const genSpec = require('./generic/generic.spec.js')
const eVP = genSpec.expressValidatorParam
// --
const oC_S = genSpec.objCreateSerie
const oUF_S = genSpec.objUpdFullSerie
const oUP_S = genSpec.objUpdParcialSerie
const oC_E = genSpec.objCreateEmissora
const oU_E = genSpec.objUpdEmissora
const oC_EL = genSpec.objCreateEquipeLegenda
const oU_EL = genSpec.objUpdEquipeLegenda
// --
const oM_S = genSpec.objModelSerie
const oM_E = genSpec.objModelEmissora
const oM_EL = genSpec.objModelEquipeLegenda

//

// Generic Default
const genDefault = require('./generic/generic.default.js')
const eMV_S = genDefault.errorMessagesValidatorSerie
const eMV_E = genDefault.errorMessagesValidatorEmissora
const eMV_EL = genDefault.errorMessagesValidatorEquipeLegenda
// --
const mR = genDefault.msgResponse
const mR_S = genDefault.msgResponseSerie
const mR_E = genDefault.msgResponseEmissora
const mR_EL = genDefault.msgResponseEquipeLegenda

//

const port = 4000
const urlBase = `http://localhost:${port}/api`
const urlSeries = '/series'
const urlEmissoras = '/emissoras'
const urlEquipeLegendas = '/equipelegendas'
var idSerieTeste = "" // Com todas as informacoes
var urlSerieTeste = "" // url para fazer o update da serie criada
var idEmissoraTeste = ""
var urlEmissoraTeste = ""
var idEquipeLegendaTeste = ""
var urlEquipeLegendaTeste = ""

//

chai.use(chaiHttp)

//

describe("Documentacao APIDOC", function() {
	it('Header == html', function(done) {
		chai.request(urlBase)
		.get('/doc')
		.end(function(err, res) {
			expect(res).to.be.html // header content-type = application/html
			done()
		})
	})
})
//
describe("Series", function() {
	//
	describe("Criar uma serie - createSerie", function() {
		it('Informacoes ok - campos obrigatorios', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieOk)
			.end(function(err, res) {
				idSerieTeste = res.body._id
				urlSerieTeste = `${urlSeries}/${idSerieTeste}` // montando a url pra usar nos testes de update e delete
				expect(res).to.have.status(201)
				expect(res.body).to.have.all.keys(['message', oM_S.param.id])
				expect(res.body.message).to.have.string(mR_S.s201)
				done()
			})
		})
		it('Informacoes nok - nome duplicado', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieOkDuplicate)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_S.s400duplikey)
				done()
			})
		})
		it('Informacoes nok - nome ausente', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieNomeAusente)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array2)
				expect(ret.param).to.have.string(oM_S.param.nome)
				expect(ret.msg).to.have.string(eMV_S.nome)
				done()
			})
		})
		it('Informacoes nok - sinalizador ausente', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieSinalizadorAusente)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array2)
				expect(ret.param).to.have.string(oM_S.param.sinalizador)
				expect(ret.msg).to.have.string(eMV_S.sinalizador)
				done()
			})
		})
		it('Informacoes nok - sinalizador invalido - NaN', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieSinalizadorInvalidoNaN)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sinalizador)
				expect(ret.msg).to.have.string(eMV_S.sinalizador)
				expect(ret.value).to.have.string(oC_S.serieSinalizadorInvalidoNaN.sinalizador)
				done()
			})
		})
		it('Informacoes nok - sinalizador invalido - ponto', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieSinalizadorInvalidoPonto)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sinalizador)
				expect(ret.msg).to.have.string(eMV_S.sinalizador)
				expect(ret.value).to.have.string(oC_S.serieSinalizadorInvalidoPonto.sinalizador)
				done()
			})
		})
		it('Informacoes nok - sinalizador invalido - virgula', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieSinalizadorInvalidoVirgula)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sinalizador)
				expect(ret.msg).to.have.string(eMV_S.sinalizador)
				expect(ret.value).to.have.string(oC_S.serieSinalizadorInvalidoVirgula.sinalizador)
				done()
			})
		})
		it('Informacoes nok - sinalizador invalido - range', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieSinalizadorInvalidoRange)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sinalizador)
				expect(ret.msg).to.have.string(eMV_S.sinalizador)
				expect(ret.value).to.have.string(oC_S.serieSinalizadorInvalidoRange.sinalizador)
				done()
			})
		})
		it('Informacoes nok - status ausente', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieStatusAusente)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array2)
				expect(ret.param).to.have.string(oM_S.param.status)
				expect(ret.msg).to.have.string(eMV_S.status)
				done()
			})
		})
		it('Informacoes nok - status invalido - NaN', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieStatusInvalidoNaN)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.status)
				expect(ret.msg).to.have.string(eMV_S.status)
				expect(ret.value).to.have.string(oC_S.serieStatusInvalidoNaN.status)
				done()
			})
		})
		it('Informacoes nok - status invalido - ponto', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieStatusInvalidoPonto)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.status)
				expect(ret.msg).to.have.string(eMV_S.status)
				expect(ret.value).to.have.string(oC_S.serieStatusInvalidoPonto.status)
				done()
			})
		})
		it('Informacoes nok - status invalido - virgula', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieStatusInvalidoVirgula)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.status)
				expect(ret.msg).to.have.string(eMV_S.status)
				expect(ret.value).to.have.string(oC_S.serieStatusInvalidoVirgula.status)
				done()
			})
		})
		it('Informacoes nok - status invalido - range', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieStatusInvalidoRange)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.status)
				expect(ret.msg).to.have.string(eMV_S.status)
				expect(ret.value).to.have.string(oC_S.serieStatusInvalidoRange.status)
				done()
			})
		})
		it('Informacoes nok - dia ausente', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieDiaAusente)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array2)
				expect(ret.param).to.have.string(oM_S.param.dia)
				expect(ret.msg).to.have.string(eMV_S.dia)
				done()
			})
		})
		it('Informacoes nok - dia invalido - NaN', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieDiaInvalidoNaN)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dia)
				expect(ret.msg).to.have.string(eMV_S.dia)
				expect(ret.value).to.have.string(oC_S.serieDiaInvalidoNaN.dia)
				done()
			})
		})
		it('Informacoes nok - dia invalido - ponto', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieDiaInvalidoPonto)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dia)
				expect(ret.msg).to.have.string(eMV_S.dia)
				expect(ret.value).to.have.string(oC_S.serieDiaInvalidoPonto.dia)
				done()
			})
		})
		it('Informacoes nok - dia invalido - virgula', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieDiaInvalidoVirgula)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dia)
				expect(ret.msg).to.have.string(eMV_S.dia)
				expect(ret.value).to.have.string(oC_S.serieDiaInvalidoVirgula.dia)
				done()
			})
		})
		it('Informacoes nok - dia invalido - range', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieDiaInvalidoRange)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dia)
				expect(ret.msg).to.have.string(eMV_S.dia)
				expect(ret.value).to.have.string(oC_S.serieDiaInvalidoRange.dia)
				done()
			})
		})
		it('Informacoes nok - sp vazio', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieSPVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sp)
				expect(ret.msg).to.have.string(eMV_S.sp)
				expect(ret.value).to.have.string(oC_S.serieSPVazio.sp)
				done()
			})
		})
		it('Informacoes nok - sp invalido - ano', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieSPAnoInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sp)
				expect(ret.msg).to.have.string(eMV_S.sp)
				expect(ret.value).to.have.string(oC_S.serieSPAnoInvalido.sp)
				done()
			})
		})
		it('Informacoes nok - sp invalido - mes', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieSPMesInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sp)
				expect(ret.msg).to.have.string(eMV_S.sp)
				expect(ret.value).to.have.string(oC_S.serieSPMesInvalido.sp)
				done()
			})
		})
		it('Informacoes nok - sp invalido - dia', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieSPDiaInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sp)
				expect(ret.msg).to.have.string(eMV_S.sp)
				expect(ret.value).to.have.string(oC_S.serieSPDiaInvalido.sp)
				done()
			})
		})
		it('Informacoes nok - sp invalido - data', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieSPDataInvalida)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sp)
				expect(ret.msg).to.have.string(eMV_S.sp)
				expect(ret.value).to.have.string(oC_S.serieSPDataInvalida.sp)
				done()
			})
		})
		it('Informacoes nok - sm vazio', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieSMVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sm)
				expect(ret.msg).to.have.string(eMV_S.sm)
				expect(ret.value).to.have.string(oC_S.serieSMVazio.sm)
				done()
			})
		})
		it('Informacoes nok - sm invalido - ano', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieSMAnoInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sm)
				expect(ret.msg).to.have.string(eMV_S.sm)
				expect(ret.value).to.have.string(oC_S.serieSMAnoInvalido.sm)
				done()
			})
		})
		it('Informacoes nok - sm invalido - mes', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieSMMesInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sm)
				expect(ret.msg).to.have.string(eMV_S.sm)
				expect(ret.value).to.have.string(oC_S.serieSMMesInvalido.sm)
				done()
			})
		})
		it('Informacoes nok - sm invalido - dia', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieSMDiaInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sm)
				expect(ret.msg).to.have.string(eMV_S.sm)
				expect(ret.value).to.have.string(oC_S.serieSMDiaInvalido.sm)
				done()
			})
		})
		it('Informacoes nok - sm invalido - data', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieSMDataInvalida)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sm)
				expect(ret.msg).to.have.string(eMV_S.sm)
				expect(ret.value).to.have.string(oC_S.serieSMDataInvalida.sm)
				done()
			})
		})
		it('Informacoes nok - hia vazio', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieHIAVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.hia)
				expect(ret.msg).to.have.string(eMV_S.hia)
				expect(ret.value).to.have.string(oC_S.serieHIAVazio.hia)
				done()
			})
		})
		it('Informacoes nok - hia invalido - ano', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieHIAAnoInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.hia)
				expect(ret.msg).to.have.string(eMV_S.hia)
				expect(ret.value).to.have.string(oC_S.serieHIAAnoInvalido.hia)
				done()
			})
		})
		it('Informacoes nok - hia invalido - mes', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieHIAMesInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.hia)
				expect(ret.msg).to.have.string(eMV_S.hia)
				expect(ret.value).to.have.string(oC_S.serieHIAMesInvalido.hia)
				done()
			})
		})
		it('Informacoes nok - hia invalido - dia', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieHIADiaInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.hia)
				expect(ret.msg).to.have.string(eMV_S.hia)
				expect(ret.value).to.have.string(oC_S.serieHIADiaInvalido.hia)
				done()
			})
		})
		it('Informacoes nok - hia invalido - data', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieHIADataInvalida)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.hia)
				expect(ret.msg).to.have.string(eMV_S.hia)
				expect(ret.value).to.have.string(oC_S.serieHIADataInvalida.hia)
				done()
			})
		})
		it('Informacoes nok - sf vazio', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieSFVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sf)
				expect(ret.msg).to.have.string(eMV_S.sf)
				expect(ret.value).to.have.string(oC_S.serieSFVazio.sf)
				done()
			})
		})
		it('Informacoes nok - sf invalido - ano', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieSFAnoInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sf)
				expect(ret.msg).to.have.string(eMV_S.sf)
				expect(ret.value).to.have.string(oC_S.serieSFAnoInvalido.sf)
				done()
			})
		})
		it('Informacoes nok - sf invalido - mes', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieSFMesInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sf)
				expect(ret.msg).to.have.string(eMV_S.sf)
				expect(ret.value).to.have.string(oC_S.serieSFMesInvalido.sf)
				done()
			})
		})
		it('Informacoes nok - sf invalido - dia', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieSFDiaInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sf)
				expect(ret.msg).to.have.string(eMV_S.sf)
				expect(ret.value).to.have.string(oC_S.serieSFDiaInvalido.sf)
				done()
			})
		})
		it('Informacoes nok - sf invalido - data', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieSFDataInvalida)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sf)
				expect(ret.msg).to.have.string(eMV_S.sf)
				expect(ret.value).to.have.string(oC_S.serieSFDataInvalida.sf)
				done()
			})
		})
		it('Informacoes nok - equipe legenda vazio', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieEqLegVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.eq_leg)
				expect(ret.msg).to.have.string(eMV_S.eq_leg)
				expect(ret.value).to.have.string(oC_S.serieEqLegVazio.eq_leg)
				done()
			})
		})
		it('Informacoes nok - equipe legenda invalida', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieEqLegInvalida)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.eq_leg)
				expect(ret.msg).to.have.string(eMV_S.eq_leg)
				expect(ret.value).to.have.string(oC_S.serieEqLegInvalida.eq_leg)
				done()
			})
		})
		it('Informacoes nok - equipe legenda parceira vazio', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieEqLegParcVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.eq_leg_parc)
				expect(ret.msg).to.have.string(eMV_S.eq_leg)
				expect(ret.value).to.have.string(oC_S.serieEqLegParcVazio.eq_leg_parc)
				done()
			})
		})
		it('Informacoes nok - equipe legenda parceira invalida', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieEqLegParcInvalida)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.eq_leg_parc)
				expect(ret.msg).to.have.string(eMV_S.eq_leg)
				expect(ret.value).to.have.string(oC_S.serieEqLegParcInvalida.eq_leg_parc)
				done()
			})
		})
		it('Informacoes nok - assistido invalido', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieAssistidoInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.assistido)
				expect(ret.msg).to.have.string(eMV_S.assistido)
				expect(ret.value).to.have.string(oC_S.serieAssistidoInvalido.assistido)
				done()
			})
		})
		// situacao
		// situacao_temp
		it('Informacoes nok - emissora vazio', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieEmissoraVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.emissora)
				expect(ret.msg).to.have.string(eMV_S.emissora)
				expect(ret.value).to.have.string(oC_S.serieEmissoraVazio.emissora)
				done()
			})
		})
		it('Informacoes nok - emissora invalida', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieEmissoraInvalida)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.emissora)
				expect(ret.msg).to.have.string(eMV_S.emissora)
				expect(ret.value).to.have.string(oC_S.serieEmissoraInvalida.emissora)
				done()
			})
		})
		it('Informacoes nok - data inicio vazio', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieDataInicioVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dt_inicio)
				expect(ret.msg).to.have.string(eMV_S.dt_inicio)
				expect(ret.value).to.have.string(oC_S.serieDataInicioVazio.dt_inicio)
				done()
			})
		})
		it('Informacoes nok - data inicio invalido - ano', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieDataInicioAnoInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dt_inicio)
				expect(ret.msg).to.have.string(eMV_S.dt_inicio)
				expect(ret.value).to.have.string(oC_S.serieDataInicioAnoInvalido.dt_inicio)
				done()
			})
		})
		it('Informacoes nok - data inicio invalido - mes', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieDataInicioMesInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dt_inicio)
				expect(ret.msg).to.have.string(eMV_S.dt_inicio)
				expect(ret.value).to.have.string(oC_S.serieDataInicioMesInvalido.dt_inicio)
				done()
			})
		})
		it('Informacoes nok - data inicio invalido - dia', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieDataInicioDiaInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dt_inicio)
				expect(ret.msg).to.have.string(eMV_S.dt_inicio)
				expect(ret.value).to.have.string(oC_S.serieDataInicioDiaInvalido.dt_inicio)
				done()
			})
		})
		it('Informacoes nok - data inicio invalido - data', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieDataInicioDataInvalida)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dt_inicio)
				expect(ret.msg).to.have.string(eMV_S.dt_inicio)
				expect(ret.value).to.have.string(oC_S.serieDataInicioDataInvalida.dt_inicio)
				done()
			})
		})
		it('Informacoes nok - data fim vazio', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieDataFimVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dt_fim)
				expect(ret.msg).to.have.string(eMV_S.dt_fim)
				expect(ret.value).to.have.string(oC_S.serieDataFimVazio.dt_fim)
				done()
			})
		})
		it('Informacoes nok - data fim invalido - ano', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieDataFimAnoInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dt_fim)
				expect(ret.msg).to.have.string(eMV_S.dt_fim)
				expect(ret.value).to.have.string(oC_S.serieDataFimAnoInvalido.dt_fim)
				done()
			})
		})
		it('Informacoes nok - data fim invalido - mes', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieDataFimMesInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dt_fim)
				expect(ret.msg).to.have.string(eMV_S.dt_fim)
				expect(ret.value).to.have.string(oC_S.serieDataFimMesInvalido.dt_fim)
				done()
			})
		})
		it('Informacoes nok - data fim invalido - dia', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieDataFimDiaInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dt_fim)
				expect(ret.msg).to.have.string(eMV_S.dt_fim)
				expect(ret.value).to.have.string(oC_S.serieDataFimDiaInvalido.dt_fim)
				done()
			})
		})
		it('Informacoes nok - data fim invalido - data', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieDataFimDataInvalida)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dt_fim)
				expect(ret.msg).to.have.string(eMV_S.dt_fim)
				expect(ret.value).to.have.string(oC_S.serieDataFimDataInvalida.dt_fim)
				done()
			})
		})
		it('Informacoes nok - total temp vazio', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieTotalTempVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.total_temp)
				expect(ret.msg).to.have.string(eMV_S.total_temp)
				expect(ret.value).to.have.string(oC_S.serieTotalTempVazio.total_temp)
				done()
			})
		})
		it('Informacoes nok - total temp invalido', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieTotalTempInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.total_temp)
				expect(ret.msg).to.have.string(eMV_S.total_temp)
				expect(ret.value).to.have.string(oC_S.serieTotalTempInvalido.total_temp)
				done()
			})
		})
		it('Informacoes nok - total ep vazio', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieTotalEpVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.total_ep)
				expect(ret.msg).to.have.string(eMV_S.total_ep)
				expect(ret.value).to.have.string(oC_S.serieTotalEpVazio.total_ep)
				done()
			})
		})
		it('Informacoes nok - total ep invalido', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieTotalEpInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.total_ep)
				expect(ret.msg).to.have.string(eMV_S.total_ep)
				expect(ret.value).to.have.string(oC_S.serieTotalEpInvalido.total_ep)
				done()
			})
		})
		it('Informacoes nok - descN vazio', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieDescNVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.descN)
				expect(ret.msg).to.have.string(eMV_S.descN)
				expect(ret.value).to.have.string(oC_S.serieDescNVazio.descN)
				done()
			})
		})
		it('Informacoes nok - descN invalido - valor simples', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieDescNValorSimples)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.descN)
				expect(ret.msg).to.have.string(eMV_S.descN)
				expect(ret.value).to.have.string(oC_S.serieDescNValorSimples.descN)
				done()
			})
		})
		it('Informacoes nok - descN invalido - array valor vazio', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieDescNArrayValorVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.descN)
				expect(ret.msg).to.have.string(eMV_S.descN)
				expect(ret.value).to.be.instanceof(Array)
				expect(ret.value).to.have.members(oC_S.serieDescNArrayValorVazio.descN)
				done()
			})
		})
		it('Informacoes nok - descN invalido - array valor caracter especial', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieDescNArrayValorCaracterEspecial)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.descN)
				expect(ret.msg).to.have.string(eMV_S.descN)
				expect(ret.value).to.be.instanceof(Array)
				expect(ret.value).to.have.members(oC_S.serieDescNArrayValorCaracterEspecial.descN)
				done()
			})
		})
		it('Informacoes nok - qtdeN vazio', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieQtdeNVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.qtdeN)
				expect(ret.msg).to.have.string(eMV_S.qtdeN)
				expect(ret.value).to.have.string(oC_S.serieQtdeNVazio.qtdeN)
				done()
			})
		})
		it('Informacoes nok - qtdeN invalido - valor simples', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieQtdeNValorSimples)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.qtdeN)
				expect(ret.msg).to.have.string(eMV_S.qtdeN)
				expect(ret.value).to.have.string(oC_S.serieQtdeNValorSimples.qtdeN)
				done()
			})
		})
		it('Informacoes nok - qtdeN invalido - array valor vazio', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieQtdeNArrayValorVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.qtdeN)
				expect(ret.msg).to.have.string(eMV_S.qtdeN)
				expect(ret.value).to.be.instanceof(Array)
		  		expect(ret.value).to.have.members(oC_S.serieQtdeNArrayValorVazio.qtdeN)
				done()
			})
		})
		it('Informacoes nok - qtdeN invalido - array valor ponto', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieQtdeNArrayValorPonto)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.qtdeN)
				expect(ret.msg).to.have.string(eMV_S.qtdeN)
				expect(ret.value).to.be.instanceof(Array)
				expect(ret.value).to.have.members(oC_S.serieQtdeNArrayValorPonto.qtdeN)
				done()
			})
		})
		it('Informacoes nok - qtdeN invalido - array valor virgula', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieQtdeNArrayValorVirgula)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.qtdeN)
				expect(ret.msg).to.have.string(eMV_S.qtdeN)
				expect(ret.value).to.be.instanceof(Array)
				expect(ret.value).to.have.members(oC_S.serieQtdeNArrayValorVirgula.qtdeN)
				done()
			})
		})
		it('Informacoes nok - gravN vazio', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieGravNVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.gravN)
				expect(ret.msg).to.have.string(eMV_S.gravN)
				expect(ret.value).to.have.string(oC_S.serieGravNVazio.gravN)
				done()
			})
		})
		it('Informacoes nok - gravN invalido - valor simples', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieGravNValorSimples)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.gravN)
				expect(ret.msg).to.have.string(eMV_S.gravN)
				expect(ret.value).to.have.string(oC_S.serieGravNValorSimples.gravN)
				done()
			})
		})
		it('Informacoes nok - gravN invalido - array valor vazio', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieGravNArrayValorVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.gravN)
				expect(ret.msg).to.have.string(eMV_S.gravN)
				expect(ret.value).to.be.instanceof(Array)
		  		expect(ret.value).to.have.members(oC_S.serieGravNArrayValorVazio.gravN)
				done()
			})
		})
		it('Informacoes nok - gravN invalido - array valor ponto', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieGravNArrayValorPonto)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.gravN)
				expect(ret.msg).to.have.string(eMV_S.gravN)
				expect(ret.value).to.be.instanceof(Array)
				expect(ret.value).to.have.members(oC_S.serieGravNArrayValorPonto.gravN)
				done()
			})
		})
		it('Informacoes nok - gravN invalido - array valor virgula', function(done) {
			chai.request(urlBase)
			.post(urlSeries)
			.send(oC_S.serieGravNArrayValorVirgula)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.gravN)
				expect(ret.msg).to.have.string(eMV_S.gravN)
				expect(ret.value).to.be.instanceof(Array)
				expect(ret.value).to.have.members(oC_S.serieGravNArrayValorVirgula.gravN)
				done()
			})
		})
		// dd_temp
		// dd_ep
		// dd_dia
		// imdb id
	})
	//
	describe("Recuperar todas as series - getAllSeries", function() {
		it('Header == json', function(done) {
			chai.request(urlBase)
			.get(urlSeries)
			.end(function(err, res) {
				expect(res).to.be.json // header content-type = application/json
				done()
			})
		})
		it('Status == 200', function(done) {
			chai.request(urlBase)
			.get(urlSeries)
			.end(function(err, res) {
				expect(res).to.have.status(200)
				done()
			})
		})
		it('Body == Array', function(done) {
			chai.request(urlBase)
			.get(urlSeries)
			.end(function(err, res) {
				expect(res.body).to.be.instanceof(Array)
				done()
			})
		})
		it('Campos ok', function(done) {
			chai.request(urlBase)
			.get(urlSeries)
			.end(function(err, res) {
				expect(res).to.have.status(200)
				// if (res.body.length > 0) {
					var ret = res.body.shift()
					expect(ret).to.have.all.keys(oM_S.arrayKeys)
					expect(ret).to.not.have.all.keys([oM_S.param.v])
				// }
				done()
			})
		})
	})
	//
	describe("Recuperar uma série - getOneSerie", function() {
		it('Série não encontrada', function(done) {
			var idSerieTeste404 = idSerieTeste.replace(/0/g, 9).replace(/1/g, 8).replace(/2/g, 7).replace(/3/g, 6).replace(/4/g, 5)
			chai.request(urlBase)
			.get(`${urlSeries}/${idSerieTeste404}`)
			.end(function(err, res) {
				expect(res).to.have.status(404)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_S.s404)
				done()
			})
		})
		it('Série encontrada', function(done) {
			chai.request(urlBase)
			.get(urlSerieTeste)
			.end(function(err, res) {
				expect(res).to.have.status(200)
				expect(res.body).to.have.all.keys(oM_S.arrayKeys)
				expect(res.body).to.not.have.all.keys([oM_S.param.v])
				done()
			})
		})
	})
	//
	describe("Alterar uma serie - updParcialSerie", function() {
		it('Série não encontrada', function(done) {
			var idSerieTeste404 = idSerieTeste.replace(/0/g, 9).replace(/1/g, 8).replace(/2/g, 7).replace(/3/g, 6).replace(/4/g, 5)
			chai.request(urlBase)
			.patch(`${urlSeries}/${idSerieTeste404}`)
			.send(oUF_S.serieOk)
			.end(function(err, res) {
				expect(res).to.have.status(404)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_S.s404)
				done()
			})
		})
		it('Informacoes ok', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieOk)
			.end(function(err, res) {
				expect(res).to.have.status(200)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_S.s200upd)
				done()
			})
		})
		it('Validar alterações', function(done) {
			chai.request(urlBase)
			.get(urlSerieTeste)
			.end(function(err, res) {
				expect(res).to.have.status(200)
				expect(res.body).to.have.all.keys(oM_S.arrayKeys)
				expect(res.body).to.not.have.all.keys([oM_S.param.v])
				expect(res.body.nome).to.have.string(oUP_S.serieOk.nome)
				expect(res.body.sp).to.be.null
				expect(res.body.sm).to.be.null
				expect(res.body.hia).to.be.null
				expect(res.body.sf).to.be.null
				done()
			})
		})
		// it('Informacoes nok - nome duplicado', function(done) {
		// 	chai.request(urlBase)
		// 	.patch(urlSerieTeste)
		// 	.send(oUP_S.serieOkDuplicate)
		// 	.end(function(err, res) {
		// 		expect(res).to.have.status(400)
		// 		expect(res.body).to.have.all.keys(['message'])
		// 		expect(res.body.message).to.have.string(mR_S.s400duplikey)
		// 		done()
		// 	})
		// })
		it('Informacoes nok - nome ausente', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieNomeAusente)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array2)
				expect(ret.param).to.have.string(oM_S.param.nome)
				expect(ret.msg).to.have.string(eMV_S.nome)
				done()
			})
		})
		it('Informacoes nok - sinalizador ausente', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieSinalizadorAusente)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array2)
				expect(ret.param).to.have.string(oM_S.param.sinalizador)
				expect(ret.msg).to.have.string(eMV_S.sinalizador)
				done()
			})
		})
		it('Informacoes nok - sinalizador invalido - NaN', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieSinalizadorInvalidoNaN)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sinalizador)
				expect(ret.msg).to.have.string(eMV_S.sinalizador)
				expect(ret.value).to.have.string(oC_S.serieSinalizadorInvalidoNaN.sinalizador)
				done()
			})
		})
		it('Informacoes nok - sinalizador invalido - ponto', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieSinalizadorInvalidoPonto)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sinalizador)
				expect(ret.msg).to.have.string(eMV_S.sinalizador)
				expect(ret.value).to.have.string(oC_S.serieSinalizadorInvalidoPonto.sinalizador)
				done()
			})
		})
		it('Informacoes nok - sinalizador invalido - virgula', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieSinalizadorInvalidoVirgula)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sinalizador)
				expect(ret.msg).to.have.string(eMV_S.sinalizador)
				expect(ret.value).to.have.string(oC_S.serieSinalizadorInvalidoVirgula.sinalizador)
				done()
			})
		})
		it('Informacoes nok - sinalizador invalido - range', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieSinalizadorInvalidoRange)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sinalizador)
				expect(ret.msg).to.have.string(eMV_S.sinalizador)
				expect(ret.value).to.have.string(oC_S.serieSinalizadorInvalidoRange.sinalizador)
				done()
			})
		})
		it('Informacoes nok - status ausente', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieStatusAusente)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array2)
				expect(ret.param).to.have.string(oM_S.param.status)
				expect(ret.msg).to.have.string(eMV_S.status)
				done()
			})
		})
		it('Informacoes nok - status invalido - NaN', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieStatusInvalidoNaN)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.status)
				expect(ret.msg).to.have.string(eMV_S.status)
				expect(ret.value).to.have.string(oC_S.serieStatusInvalidoNaN.status)
				done()
			})
		})
		it('Informacoes nok - status invalido - ponto', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieStatusInvalidoPonto)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.status)
				expect(ret.msg).to.have.string(eMV_S.status)
				expect(ret.value).to.have.string(oC_S.serieStatusInvalidoPonto.status)
				done()
			})
		})
		it('Informacoes nok - status invalido - virgula', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieStatusInvalidoVirgula)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.status)
				expect(ret.msg).to.have.string(eMV_S.status)
				expect(ret.value).to.have.string(oC_S.serieStatusInvalidoVirgula.status)
				done()
			})
		})
		it('Informacoes nok - status invalido - range', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieStatusInvalidoRange)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.status)
				expect(ret.msg).to.have.string(eMV_S.status)
				expect(ret.value).to.have.string(oC_S.serieStatusInvalidoRange.status)
				done()
			})
		})
		it('Informacoes nok - dia ausente', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieDiaAusente)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array2)
				expect(ret.param).to.have.string(oM_S.param.dia)
				expect(ret.msg).to.have.string(eMV_S.dia)
				done()
			})
		})
		it('Informacoes nok - dia invalido - NaN', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieDiaInvalidoNaN)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dia)
				expect(ret.msg).to.have.string(eMV_S.dia)
				expect(ret.value).to.have.string(oC_S.serieDiaInvalidoNaN.dia)
				done()
			})
		})
		it('Informacoes nok - dia invalido - ponto', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieDiaInvalidoPonto)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dia)
				expect(ret.msg).to.have.string(eMV_S.dia)
				expect(ret.value).to.have.string(oC_S.serieDiaInvalidoPonto.dia)
				done()
			})
		})
		it('Informacoes nok - dia invalido - virgula', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieDiaInvalidoVirgula)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dia)
				expect(ret.msg).to.have.string(eMV_S.dia)
				expect(ret.value).to.have.string(oC_S.serieDiaInvalidoVirgula.dia)
				done()
			})
		})
		it('Informacoes nok - dia invalido - range', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieDiaInvalidoRange)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dia)
				expect(ret.msg).to.have.string(eMV_S.dia)
				expect(ret.value).to.have.string(oC_S.serieDiaInvalidoRange.dia)
				done()
			})
		})
		it('Informacoes nok - sp vazio', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieSPVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sp)
				expect(ret.msg).to.have.string(eMV_S.sp)
				expect(ret.value).to.have.string(oC_S.serieSPVazio.sp)
				done()
			})
		})
		it('Informacoes nok - sp invalido - ano', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieSPAnoInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sp)
				expect(ret.msg).to.have.string(eMV_S.sp)
				expect(ret.value).to.have.string(oC_S.serieSPAnoInvalido.sp)
				done()
			})
		})
		it('Informacoes nok - sp invalido - mes', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieSPMesInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sp)
				expect(ret.msg).to.have.string(eMV_S.sp)
				expect(ret.value).to.have.string(oC_S.serieSPMesInvalido.sp)
				done()
			})
		})
		it('Informacoes nok - sp invalido - dia', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieSPDiaInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sp)
				expect(ret.msg).to.have.string(eMV_S.sp)
				expect(ret.value).to.have.string(oC_S.serieSPDiaInvalido.sp)
				done()
			})
		})
		it('Informacoes nok - sp invalido - data', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieSPDataInvalida)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sp)
				expect(ret.msg).to.have.string(eMV_S.sp)
				expect(ret.value).to.have.string(oC_S.serieSPDataInvalida.sp)
				done()
			})
		})
		it('Informacoes nok - sm vazio', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieSMVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sm)
				expect(ret.msg).to.have.string(eMV_S.sm)
				expect(ret.value).to.have.string(oC_S.serieSMVazio.sm)
				done()
			})
		})
		it('Informacoes nok - sm invalido - ano', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieSMAnoInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sm)
				expect(ret.msg).to.have.string(eMV_S.sm)
				expect(ret.value).to.have.string(oC_S.serieSMAnoInvalido.sm)
				done()
			})
		})
		it('Informacoes nok - sm invalido - mes', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieSMMesInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sm)
				expect(ret.msg).to.have.string(eMV_S.sm)
				expect(ret.value).to.have.string(oC_S.serieSMMesInvalido.sm)
				done()
			})
		})
		it('Informacoes nok - sm invalido - dia', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieSMDiaInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sm)
				expect(ret.msg).to.have.string(eMV_S.sm)
				expect(ret.value).to.have.string(oC_S.serieSMDiaInvalido.sm)
				done()
			})
		})
		it('Informacoes nok - sm invalido - data', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieSMDataInvalida)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sm)
				expect(ret.msg).to.have.string(eMV_S.sm)
				expect(ret.value).to.have.string(oC_S.serieSMDataInvalida.sm)
				done()
			})
		})
		it('Informacoes nok - hia vazio', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieHIAVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.hia)
				expect(ret.msg).to.have.string(eMV_S.hia)
				expect(ret.value).to.have.string(oC_S.serieHIAVazio.hia)
				done()
			})
		})
		it('Informacoes nok - hia invalido - ano', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieHIAAnoInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.hia)
				expect(ret.msg).to.have.string(eMV_S.hia)
				expect(ret.value).to.have.string(oC_S.serieHIAAnoInvalido.hia)
				done()
			})
		})
		it('Informacoes nok - hia invalido - mes', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieHIAMesInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.hia)
				expect(ret.msg).to.have.string(eMV_S.hia)
				expect(ret.value).to.have.string(oC_S.serieHIAMesInvalido.hia)
				done()
			})
		})
		it('Informacoes nok - hia invalido - dia', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieHIADiaInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.hia)
				expect(ret.msg).to.have.string(eMV_S.hia)
				expect(ret.value).to.have.string(oC_S.serieHIADiaInvalido.hia)
				done()
			})
		})
		it('Informacoes nok - hia invalido - data', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieHIADataInvalida)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.hia)
				expect(ret.msg).to.have.string(eMV_S.hia)
				expect(ret.value).to.have.string(oC_S.serieHIADataInvalida.hia)
				done()
			})
		})
		it('Informacoes nok - sf vazio', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieSFVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sf)
				expect(ret.msg).to.have.string(eMV_S.sf)
				expect(ret.value).to.have.string(oC_S.serieSFVazio.sf)
				done()
			})
		})
		it('Informacoes nok - sf invalido - ano', function(done) {
			chai.request(urlBase)
			.put(`${urlSeries}/${idSerieTeste}`)
			.send(oUF_S.serieSFAnoInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sf)
				expect(ret.msg).to.have.string(eMV_S.sf)
				expect(ret.value).to.have.string(oC_S.serieSFAnoInvalido.sf)
				done()
			})
		})
		it('Informacoes nok - sf invalido - mes', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieSFMesInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sf)
				expect(ret.msg).to.have.string(eMV_S.sf)
				expect(ret.value).to.have.string(oC_S.serieSFMesInvalido.sf)
				done()
			})
		})
		it('Informacoes nok - sf invalido - dia', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieSFDiaInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sf)
				expect(ret.msg).to.have.string(eMV_S.sf)
				expect(ret.value).to.have.string(oC_S.serieSFDiaInvalido.sf)
				done()
			})
		})
		it('Informacoes nok - sf invalido - data', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieSFDataInvalida)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sf)
				expect(ret.msg).to.have.string(eMV_S.sf)
				expect(ret.value).to.have.string(oC_S.serieSFDataInvalida.sf)
				done()
			})
		})
		it('Informacoes nok - equipe legenda vazio', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieEqLegVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.eq_leg)
				expect(ret.msg).to.have.string(eMV_S.eq_leg)
				expect(ret.value).to.have.string(oC_S.serieEqLegVazio.eq_leg)
				done()
			})
		})
		it('Informacoes nok - equipe legenda invalida', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieEqLegInvalida)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.eq_leg)
				expect(ret.msg).to.have.string(eMV_S.eq_leg)
				expect(ret.value).to.have.string(oC_S.serieEqLegInvalida.eq_leg)
				done()
			})
		})
		it('Informacoes nok - equipe legenda parceira vazio', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieEqLegParcVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.eq_leg_parc)
				expect(ret.msg).to.have.string(eMV_S.eq_leg)
				expect(ret.value).to.have.string(oC_S.serieEqLegParcVazio.eq_leg_parc)
				done()
			})
		})
		it('Informacoes nok - equipe legenda parceira invalida', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieEqLegParcInvalida)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.eq_leg_parc)
				expect(ret.msg).to.have.string(eMV_S.eq_leg)
				expect(ret.value).to.have.string(oC_S.serieEqLegParcInvalida.eq_leg_parc)
				done()
			})
		})
		it('Informacoes nok - assistido invalido', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieAssistidoInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.assistido)
				expect(ret.msg).to.have.string(eMV_S.assistido)
				expect(ret.value).to.have.string(oC_S.serieAssistidoInvalido.assistido)
				done()
			})
		})
		// // situacao
		// // situacao_temp
		it('Informacoes nok - emissora vazio', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieEmissoraVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.emissora)
				expect(ret.msg).to.have.string(eMV_S.emissora)
				expect(ret.value).to.have.string(oC_S.serieEmissoraVazio.emissora)
				done()
			})
		})
		it('Informacoes nok - emissora invalida', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieEmissoraInvalida)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.emissora)
				expect(ret.msg).to.have.string(eMV_S.emissora)
				expect(ret.value).to.have.string(oC_S.serieEmissoraInvalida.emissora)
				done()
			})
		})
		it('Informacoes nok - data inicio vazio', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieDataInicioVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dt_inicio)
				expect(ret.msg).to.have.string(eMV_S.dt_inicio)
				expect(ret.value).to.have.string(oC_S.serieDataInicioVazio.dt_inicio)
				done()
			})
		})
		it('Informacoes nok - data inicio invalido - ano', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieDataInicioAnoInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dt_inicio)
				expect(ret.msg).to.have.string(eMV_S.dt_inicio)
				expect(ret.value).to.have.string(oC_S.serieDataInicioAnoInvalido.dt_inicio)
				done()
			})
		})
		it('Informacoes nok - data inicio invalido - mes', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieDataInicioMesInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dt_inicio)
				expect(ret.msg).to.have.string(eMV_S.dt_inicio)
				expect(ret.value).to.have.string(oC_S.serieDataInicioMesInvalido.dt_inicio)
				done()
			})
		})
		it('Informacoes nok - data inicio invalido - dia', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieDataInicioDiaInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dt_inicio)
				expect(ret.msg).to.have.string(eMV_S.dt_inicio)
				expect(ret.value).to.have.string(oC_S.serieDataInicioDiaInvalido.dt_inicio)
				done()
			})
		})
		it('Informacoes nok - data inicio invalido - data', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieDataInicioDataInvalida)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dt_inicio)
				expect(ret.msg).to.have.string(eMV_S.dt_inicio)
				expect(ret.value).to.have.string(oC_S.serieDataInicioDataInvalida.dt_inicio)
				done()
			})
		})
		it('Informacoes nok - data fim vazio', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieDataFimVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dt_fim)
				expect(ret.msg).to.have.string(eMV_S.dt_fim)
				expect(ret.value).to.have.string(oC_S.serieDataFimVazio.dt_fim)
				done()
			})
		})
		it('Informacoes nok - data fim invalido - ano', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieDataFimAnoInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dt_fim)
				expect(ret.msg).to.have.string(eMV_S.dt_fim)
				expect(ret.value).to.have.string(oC_S.serieDataFimAnoInvalido.dt_fim)
				done()
			})
		})
		it('Informacoes nok - data fim invalido - mes', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieDataFimMesInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dt_fim)
				expect(ret.msg).to.have.string(eMV_S.dt_fim)
				expect(ret.value).to.have.string(oC_S.serieDataFimMesInvalido.dt_fim)
				done()
			})
		})
		it('Informacoes nok - data fim invalido - dia', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieDataFimDiaInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dt_fim)
				expect(ret.msg).to.have.string(eMV_S.dt_fim)
				expect(ret.value).to.have.string(oC_S.serieDataFimDiaInvalido.dt_fim)
				done()
			})
		})
		it('Informacoes nok - data fim invalido - data', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieDataFimDataInvalida)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dt_fim)
				expect(ret.msg).to.have.string(eMV_S.dt_fim)
				expect(ret.value).to.have.string(oC_S.serieDataFimDataInvalida.dt_fim)
				done()
			})
		})
		it('Informacoes nok - total temp vazio', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieTotalTempVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.total_temp)
				expect(ret.msg).to.have.string(eMV_S.total_temp)
				expect(ret.value).to.have.string(oC_S.serieTotalTempVazio.total_temp)
				done()
			})
		})
		it('Informacoes nok - total temp invalido', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieTotalTempInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.total_temp)
				expect(ret.msg).to.have.string(eMV_S.total_temp)
				expect(ret.value).to.have.string(oC_S.serieTotalTempInvalido.total_temp)
				done()
			})
		})
		it('Informacoes nok - total ep vazio', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieTotalEpVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.total_ep)
				expect(ret.msg).to.have.string(eMV_S.total_ep)
				expect(ret.value).to.have.string(oC_S.serieTotalEpVazio.total_ep)
				done()
			})
		})
		it('Informacoes nok - total ep invalido', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieTotalEpInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.total_ep)
				expect(ret.msg).to.have.string(eMV_S.total_ep)
				expect(ret.value).to.have.string(oC_S.serieTotalEpInvalido.total_ep)
				done()
			})
		})
		it('Informacoes nok - descN vazio', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieDescNVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.descN)
				expect(ret.msg).to.have.string(eMV_S.descN)
				expect(ret.value).to.have.string(oC_S.serieDescNVazio.descN)
				done()
			})
		})
		it('Informacoes nok - descN invalido - valor simples', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieDescNValorSimples)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.descN)
				expect(ret.msg).to.have.string(eMV_S.descN)
				expect(ret.value).to.have.string(oC_S.serieDescNValorSimples.descN)
				done()
			})
		})
		it('Informacoes nok - descN invalido - array valor vazio', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieDescNArrayValorVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.descN)
				expect(ret.msg).to.have.string(eMV_S.descN)
				expect(ret.value).to.be.instanceof(Array)
				expect(ret.value).to.have.members(oC_S.serieDescNArrayValorVazio.descN)
				done()
			})
		})
		it('Informacoes nok - descN invalido - array valor caracter especial', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieDescNArrayValorCaracterEspecial)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.descN)
				expect(ret.msg).to.have.string(eMV_S.descN)
				expect(ret.value).to.be.instanceof(Array)
				expect(ret.value).to.have.members(oC_S.serieDescNArrayValorCaracterEspecial.descN)
				done()
			})
		})
		it('Informacoes nok - qtdeN vazio', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieQtdeNVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.qtdeN)
				expect(ret.msg).to.have.string(eMV_S.qtdeN)
				expect(ret.value).to.have.string(oC_S.serieQtdeNVazio.qtdeN)
				done()
			})
		})
		it('Informacoes nok - qtdeN invalido - valor simples', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieQtdeNValorSimples)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.qtdeN)
				expect(ret.msg).to.have.string(eMV_S.qtdeN)
				expect(ret.value).to.have.string(oC_S.serieQtdeNValorSimples.qtdeN)
				done()
			})
		})
		it('Informacoes nok - qtdeN invalido - array valor vazio', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieQtdeNArrayValorVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.qtdeN)
				expect(ret.msg).to.have.string(eMV_S.qtdeN)
				expect(ret.value).to.be.instanceof(Array)
		  		expect(ret.value).to.have.members(oC_S.serieQtdeNArrayValorVazio.qtdeN)
				done()
			})
		})
		it('Informacoes nok - qtdeN invalido - array valor ponto', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieQtdeNArrayValorPonto)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.qtdeN)
				expect(ret.msg).to.have.string(eMV_S.qtdeN)
				expect(ret.value).to.be.instanceof(Array)
				expect(ret.value).to.have.members(oC_S.serieQtdeNArrayValorPonto.qtdeN)
				done()
			})
		})
		it('Informacoes nok - qtdeN invalido - array valor virgula', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieQtdeNArrayValorVirgula)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.qtdeN)
				expect(ret.msg).to.have.string(eMV_S.qtdeN)
				expect(ret.value).to.be.instanceof(Array)
				expect(ret.value).to.have.members(oC_S.serieQtdeNArrayValorVirgula.qtdeN)
				done()
			})
		})
		it('Informacoes nok - gravN vazio', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieGravNVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.gravN)
				expect(ret.msg).to.have.string(eMV_S.gravN)
				expect(ret.value).to.have.string(oC_S.serieGravNVazio.gravN)
				done()
			})
		})
		it('Informacoes nok - gravN invalido - valor simples', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieGravNValorSimples)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.gravN)
				expect(ret.msg).to.have.string(eMV_S.gravN)
				expect(ret.value).to.have.string(oC_S.serieGravNValorSimples.gravN)
				done()
			})
		})
		it('Informacoes nok - gravN invalido - array valor vazio', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieGravNArrayValorVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.gravN)
				expect(ret.msg).to.have.string(eMV_S.gravN)
				expect(ret.value).to.be.instanceof(Array)
		  		expect(ret.value).to.have.members(oC_S.serieGravNArrayValorVazio.gravN)
				done()
			})
		})
		it('Informacoes nok - gravN invalido - array valor ponto', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieGravNArrayValorPonto)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.gravN)
				expect(ret.msg).to.have.string(eMV_S.gravN)
				expect(ret.value).to.be.instanceof(Array)
				expect(ret.value).to.have.members(oC_S.serieGravNArrayValorPonto.gravN)
				done()
			})
		})
		it('Informacoes nok - gravN invalido - array valor virgula', function(done) {
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oUP_S.serieGravNArrayValorVirgula)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.gravN)
				expect(ret.msg).to.have.string(eMV_S.gravN)
				expect(ret.value).to.be.instanceof(Array)
				expect(ret.value).to.have.members(oC_S.serieGravNArrayValorVirgula.gravN)
				done()
			})
		})
		// dd_temp
		// dd_ep
		// dd_dia
		// imdb id
	})
	//
	describe("Alterar uma serie - updFullSerie", function() {
		it('Série não encontrada', function(done) {
			var idSerieTeste404 = idSerieTeste.replace(/0/g, 9).replace(/1/g, 8).replace(/2/g, 7).replace(/3/g, 6).replace(/4/g, 5)
			chai.request(urlBase)
			.put(`${urlSeries}/${idSerieTeste404}`)
			.send(oUF_S.serieOk)
			.end(function(err, res) {
				expect(res).to.have.status(404)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_S.s404)
				done()
			})
		})
		it('Informacoes ok', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieOk)
			.end(function(err, res) {
				expect(res).to.have.status(200)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_S.s200upd)
				done()
			})
		})
		// it('Informacoes nok - nome duplicado', function(done) {
		// 	chai.request(urlBase)
		// 	.put(urlSerieTeste)
		// 	.send(oUF_S.serieOkDuplicate)
		// 	.end(function(err, res) {
		// 		expect(res).to.have.status(400)
		// 		expect(res.body).to.have.all.keys(['message'])
		// 		expect(res.body.message).to.have.string(mR_S.s400duplikey)
		// 		done()
		// 	})
		// })
		it('Informacoes nok - nome ausente', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieNomeAusente)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array2)
				expect(ret.param).to.have.string(oM_S.param.nome)
				expect(ret.msg).to.have.string(eMV_S.nome)
				done()
			})
		})
		it('Informacoes nok - sinalizador ausente', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieSinalizadorAusente)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array2)
				expect(ret.param).to.have.string(oM_S.param.sinalizador)
				expect(ret.msg).to.have.string(eMV_S.sinalizador)
				done()
			})
		})
		it('Informacoes nok - sinalizador invalido - NaN', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieSinalizadorInvalidoNaN)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sinalizador)
				expect(ret.msg).to.have.string(eMV_S.sinalizador)
				expect(ret.value).to.have.string(oC_S.serieSinalizadorInvalidoNaN.sinalizador)
				done()
			})
		})
		it('Informacoes nok - sinalizador invalido - ponto', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieSinalizadorInvalidoPonto)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sinalizador)
				expect(ret.msg).to.have.string(eMV_S.sinalizador)
				expect(ret.value).to.have.string(oC_S.serieSinalizadorInvalidoPonto.sinalizador)
				done()
			})
		})
		it('Informacoes nok - sinalizador invalido - virgula', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieSinalizadorInvalidoVirgula)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sinalizador)
				expect(ret.msg).to.have.string(eMV_S.sinalizador)
				expect(ret.value).to.have.string(oC_S.serieSinalizadorInvalidoVirgula.sinalizador)
				done()
			})
		})
		it('Informacoes nok - sinalizador invalido - range', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieSinalizadorInvalidoRange)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sinalizador)
				expect(ret.msg).to.have.string(eMV_S.sinalizador)
				expect(ret.value).to.have.string(oC_S.serieSinalizadorInvalidoRange.sinalizador)
				done()
			})
		})
		it('Informacoes nok - status ausente', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieStatusAusente)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array2)
				expect(ret.param).to.have.string(oM_S.param.status)
				expect(ret.msg).to.have.string(eMV_S.status)
				done()
			})
		})
		it('Informacoes nok - status invalido - NaN', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieStatusInvalidoNaN)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.status)
				expect(ret.msg).to.have.string(eMV_S.status)
				expect(ret.value).to.have.string(oC_S.serieStatusInvalidoNaN.status)
				done()
			})
		})
		it('Informacoes nok - status invalido - ponto', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieStatusInvalidoPonto)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.status)
				expect(ret.msg).to.have.string(eMV_S.status)
				expect(ret.value).to.have.string(oC_S.serieStatusInvalidoPonto.status)
				done()
			})
		})
		it('Informacoes nok - status invalido - virgula', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieStatusInvalidoVirgula)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.status)
				expect(ret.msg).to.have.string(eMV_S.status)
				expect(ret.value).to.have.string(oC_S.serieStatusInvalidoVirgula.status)
				done()
			})
		})
		it('Informacoes nok - status invalido - range', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieStatusInvalidoRange)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.status)
				expect(ret.msg).to.have.string(eMV_S.status)
				expect(ret.value).to.have.string(oC_S.serieStatusInvalidoRange.status)
				done()
			})
		})
		it('Informacoes nok - dia ausente', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieDiaAusente)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array2)
				expect(ret.param).to.have.string(oM_S.param.dia)
				expect(ret.msg).to.have.string(eMV_S.dia)
				done()
			})
		})
		it('Informacoes nok - dia invalido - NaN', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieDiaInvalidoNaN)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dia)
				expect(ret.msg).to.have.string(eMV_S.dia)
				expect(ret.value).to.have.string(oC_S.serieDiaInvalidoNaN.dia)
				done()
			})
		})
		it('Informacoes nok - dia invalido - ponto', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieDiaInvalidoPonto)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dia)
				expect(ret.msg).to.have.string(eMV_S.dia)
				expect(ret.value).to.have.string(oC_S.serieDiaInvalidoPonto.dia)
				done()
			})
		})
		it('Informacoes nok - dia invalido - virgula', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieDiaInvalidoVirgula)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dia)
				expect(ret.msg).to.have.string(eMV_S.dia)
				expect(ret.value).to.have.string(oC_S.serieDiaInvalidoVirgula.dia)
				done()
			})
		})
		it('Informacoes nok - dia invalido - range', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieDiaInvalidoRange)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dia)
				expect(ret.msg).to.have.string(eMV_S.dia)
				expect(ret.value).to.have.string(oC_S.serieDiaInvalidoRange.dia)
				done()
			})
		})
		it('Informacoes nok - sp vazio', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieSPVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sp)
				expect(ret.msg).to.have.string(eMV_S.sp)
				expect(ret.value).to.have.string(oC_S.serieSPVazio.sp)
				done()
			})
		})
		it('Informacoes nok - sp invalido - ano', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieSPAnoInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sp)
				expect(ret.msg).to.have.string(eMV_S.sp)
				expect(ret.value).to.have.string(oC_S.serieSPAnoInvalido.sp)
				done()
			})
		})
		it('Informacoes nok - sp invalido - mes', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieSPMesInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sp)
				expect(ret.msg).to.have.string(eMV_S.sp)
				expect(ret.value).to.have.string(oC_S.serieSPMesInvalido.sp)
				done()
			})
		})
		it('Informacoes nok - sp invalido - dia', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieSPDiaInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sp)
				expect(ret.msg).to.have.string(eMV_S.sp)
				expect(ret.value).to.have.string(oC_S.serieSPDiaInvalido.sp)
				done()
			})
		})
		it('Informacoes nok - sp invalido - data', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieSPDataInvalida)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sp)
				expect(ret.msg).to.have.string(eMV_S.sp)
				expect(ret.value).to.have.string(oC_S.serieSPDataInvalida.sp)
				done()
			})
		})
		it('Informacoes nok - sm vazio', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieSMVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sm)
				expect(ret.msg).to.have.string(eMV_S.sm)
				expect(ret.value).to.have.string(oC_S.serieSMVazio.sm)
				done()
			})
		})
		it('Informacoes nok - sm invalido - ano', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieSMAnoInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sm)
				expect(ret.msg).to.have.string(eMV_S.sm)
				expect(ret.value).to.have.string(oC_S.serieSMAnoInvalido.sm)
				done()
			})
		})
		it('Informacoes nok - sm invalido - mes', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieSMMesInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sm)
				expect(ret.msg).to.have.string(eMV_S.sm)
				expect(ret.value).to.have.string(oC_S.serieSMMesInvalido.sm)
				done()
			})
		})
		it('Informacoes nok - sm invalido - dia', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieSMDiaInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sm)
				expect(ret.msg).to.have.string(eMV_S.sm)
				expect(ret.value).to.have.string(oC_S.serieSMDiaInvalido.sm)
				done()
			})
		})
		it('Informacoes nok - sm invalido - data', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieSMDataInvalida)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sm)
				expect(ret.msg).to.have.string(eMV_S.sm)
				expect(ret.value).to.have.string(oC_S.serieSMDataInvalida.sm)
				done()
			})
		})
		it('Informacoes nok - hia vazio', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieHIAVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.hia)
				expect(ret.msg).to.have.string(eMV_S.hia)
				expect(ret.value).to.have.string(oC_S.serieHIAVazio.hia)
				done()
			})
		})
		it('Informacoes nok - hia invalido - ano', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieHIAAnoInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.hia)
				expect(ret.msg).to.have.string(eMV_S.hia)
				expect(ret.value).to.have.string(oC_S.serieHIAAnoInvalido.hia)
				done()
			})
		})
		it('Informacoes nok - hia invalido - mes', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieHIAMesInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.hia)
				expect(ret.msg).to.have.string(eMV_S.hia)
				expect(ret.value).to.have.string(oC_S.serieHIAMesInvalido.hia)
				done()
			})
		})
		it('Informacoes nok - hia invalido - dia', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieHIADiaInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.hia)
				expect(ret.msg).to.have.string(eMV_S.hia)
				expect(ret.value).to.have.string(oC_S.serieHIADiaInvalido.hia)
				done()
			})
		})
		it('Informacoes nok - hia invalido - data', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieHIADataInvalida)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.hia)
				expect(ret.msg).to.have.string(eMV_S.hia)
				expect(ret.value).to.have.string(oC_S.serieHIADataInvalida.hia)
				done()
			})
		})
		it('Informacoes nok - sf vazio', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieSFVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sf)
				expect(ret.msg).to.have.string(eMV_S.sf)
				expect(ret.value).to.have.string(oC_S.serieSFVazio.sf)
				done()
			})
		})
		it('Informacoes nok - sf invalido - ano', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieSFAnoInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sf)
				expect(ret.msg).to.have.string(eMV_S.sf)
				expect(ret.value).to.have.string(oC_S.serieSFAnoInvalido.sf)
				done()
			})
		})
		it('Informacoes nok - sf invalido - mes', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieSFMesInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sf)
				expect(ret.msg).to.have.string(eMV_S.sf)
				expect(ret.value).to.have.string(oC_S.serieSFMesInvalido.sf)
				done()
			})
		})
		it('Informacoes nok - sf invalido - dia', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieSFDiaInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sf)
				expect(ret.msg).to.have.string(eMV_S.sf)
				expect(ret.value).to.have.string(oC_S.serieSFDiaInvalido.sf)
				done()
			})
		})
		it('Informacoes nok - sf invalido - data', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieSFDataInvalida)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.sf)
				expect(ret.msg).to.have.string(eMV_S.sf)
				expect(ret.value).to.have.string(oC_S.serieSFDataInvalida.sf)
				done()
			})
		})
		it('Informacoes nok - equipe legenda vazio', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieEqLegVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.eq_leg)
				expect(ret.msg).to.have.string(eMV_S.eq_leg)
				expect(ret.value).to.have.string(oC_S.serieEqLegVazio.eq_leg)
				done()
			})
		})
		it('Informacoes nok - equipe legenda invalida', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieEqLegInvalida)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.eq_leg)
				expect(ret.msg).to.have.string(eMV_S.eq_leg)
				expect(ret.value).to.have.string(oC_S.serieEqLegInvalida.eq_leg)
				done()
			})
		})
		it('Informacoes nok - equipe legenda parceira vazio', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieEqLegParcVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.eq_leg_parc)
				expect(ret.msg).to.have.string(eMV_S.eq_leg)
				expect(ret.value).to.have.string(oC_S.serieEqLegParcVazio.eq_leg_parc)
				done()
			})
		})
		it('Informacoes nok - equipe legenda parceira invalida', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieEqLegParcInvalida)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.eq_leg_parc)
				expect(ret.msg).to.have.string(eMV_S.eq_leg)
				expect(ret.value).to.have.string(oC_S.serieEqLegParcInvalida.eq_leg_parc)
				done()
			})
		})
		it('Informacoes nok - assistido invalido', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieAssistidoInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.assistido)
				expect(ret.msg).to.have.string(eMV_S.assistido)
				expect(ret.value).to.have.string(oC_S.serieAssistidoInvalido.assistido)
				done()
			})
		})
		// situacao
		// situacao_temp
		it('Informacoes nok - emissora vazio', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieEmissoraVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.emissora)
				expect(ret.msg).to.have.string(eMV_S.emissora)
				expect(ret.value).to.have.string(oC_S.serieEmissoraVazio.emissora)
				done()
			})
		})
		it('Informacoes nok - emissora invalida', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieEmissoraInvalida)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.emissora)
				expect(ret.msg).to.have.string(eMV_S.emissora)
				expect(ret.value).to.have.string(oC_S.serieEmissoraInvalida.emissora)
				done()
			})
		})
		it('Informacoes nok - data inicio vazio', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieDataInicioVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dt_inicio)
				expect(ret.msg).to.have.string(eMV_S.dt_inicio)
				expect(ret.value).to.have.string(oC_S.serieDataInicioVazio.dt_inicio)
				done()
			})
		})
		it('Informacoes nok - data inicio invalido - ano', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieDataInicioAnoInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dt_inicio)
				expect(ret.msg).to.have.string(eMV_S.dt_inicio)
				expect(ret.value).to.have.string(oC_S.serieDataInicioAnoInvalido.dt_inicio)
				done()
			})
		})
		it('Informacoes nok - data inicio invalido - mes', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieDataInicioMesInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dt_inicio)
				expect(ret.msg).to.have.string(eMV_S.dt_inicio)
				expect(ret.value).to.have.string(oC_S.serieDataInicioMesInvalido.dt_inicio)
				done()
			})
		})
		it('Informacoes nok - data inicio invalido - dia', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieDataInicioDiaInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dt_inicio)
				expect(ret.msg).to.have.string(eMV_S.dt_inicio)
				expect(ret.value).to.have.string(oC_S.serieDataInicioDiaInvalido.dt_inicio)
				done()
			})
		})
		it('Informacoes nok - data inicio invalido - data', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieDataInicioDataInvalida)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dt_inicio)
				expect(ret.msg).to.have.string(eMV_S.dt_inicio)
				expect(ret.value).to.have.string(oC_S.serieDataInicioDataInvalida.dt_inicio)
				done()
			})
		})
		it('Informacoes nok - data fim vazio', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieDataFimVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dt_fim)
				expect(ret.msg).to.have.string(eMV_S.dt_fim)
				expect(ret.value).to.have.string(oC_S.serieDataFimVazio.dt_fim)
				done()
			})
		})
		it('Informacoes nok - data fim invalido - ano', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieDataFimAnoInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dt_fim)
				expect(ret.msg).to.have.string(eMV_S.dt_fim)
				expect(ret.value).to.have.string(oC_S.serieDataFimAnoInvalido.dt_fim)
				done()
			})
		})
		it('Informacoes nok - data fim invalido - mes', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieDataFimMesInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dt_fim)
				expect(ret.msg).to.have.string(eMV_S.dt_fim)
				expect(ret.value).to.have.string(oC_S.serieDataFimMesInvalido.dt_fim)
				done()
			})
		})
		it('Informacoes nok - data fim invalido - dia', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieDataFimDiaInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dt_fim)
				expect(ret.msg).to.have.string(eMV_S.dt_fim)
				expect(ret.value).to.have.string(oC_S.serieDataFimDiaInvalido.dt_fim)
				done()
			})
		})
		it('Informacoes nok - data fim invalido - data', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieDataFimDataInvalida)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.dt_fim)
				expect(ret.msg).to.have.string(eMV_S.dt_fim)
				expect(ret.value).to.have.string(oC_S.serieDataFimDataInvalida.dt_fim)
				done()
			})
		})
		it('Informacoes nok - total temp vazio', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieTotalTempVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.total_temp)
				expect(ret.msg).to.have.string(eMV_S.total_temp)
				expect(ret.value).to.have.string(oC_S.serieTotalTempVazio.total_temp)
				done()
			})
		})
		it('Informacoes nok - total temp invalido', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieTotalTempInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.total_temp)
				expect(ret.msg).to.have.string(eMV_S.total_temp)
				expect(ret.value).to.have.string(oC_S.serieTotalTempInvalido.total_temp)
				done()
			})
		})
		it('Informacoes nok - total ep vazio', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieTotalEpVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.total_ep)
				expect(ret.msg).to.have.string(eMV_S.total_ep)
				expect(ret.value).to.have.string(oC_S.serieTotalEpVazio.total_ep)
				done()
			})
		})
		it('Informacoes nok - total ep invalido', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieTotalEpInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.total_ep)
				expect(ret.msg).to.have.string(eMV_S.total_ep)
				expect(ret.value).to.have.string(oC_S.serieTotalEpInvalido.total_ep)
				done()
			})
		})
		it('Informacoes nok - descN vazio', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieDescNVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.descN)
				expect(ret.msg).to.have.string(eMV_S.descN)
				expect(ret.value).to.have.string(oC_S.serieDescNVazio.descN)
				done()
			})
		})
		it('Informacoes nok - descN invalido - valor simples', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieDescNValorSimples)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.descN)
				expect(ret.msg).to.have.string(eMV_S.descN)
				expect(ret.value).to.have.string(oC_S.serieDescNValorSimples.descN)
				done()
			})
		})
		it('Informacoes nok - descN invalido - array valor vazio', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieDescNArrayValorVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.descN)
				expect(ret.msg).to.have.string(eMV_S.descN)
				expect(ret.value).to.be.instanceof(Array)
				expect(ret.value).to.have.members(oC_S.serieDescNArrayValorVazio.descN)
				done()
			})
		})
		it('Informacoes nok - descN invalido - array valor caracter especial', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieDescNArrayValorCaracterEspecial)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.descN)
				expect(ret.msg).to.have.string(eMV_S.descN)
				expect(ret.value).to.be.instanceof(Array)
				expect(ret.value).to.have.members(oC_S.serieDescNArrayValorCaracterEspecial.descN)
				done()
			})
		})
		it('Informacoes nok - qtdeN vazio', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieQtdeNVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.qtdeN)
				expect(ret.msg).to.have.string(eMV_S.qtdeN)
				expect(ret.value).to.have.string(oC_S.serieQtdeNVazio.qtdeN)
				done()
			})
		})
		it('Informacoes nok - qtdeN invalido - valor simples', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieQtdeNValorSimples)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.qtdeN)
				expect(ret.msg).to.have.string(eMV_S.qtdeN)
				expect(ret.value).to.have.string(oC_S.serieQtdeNValorSimples.qtdeN)
				done()
			})
		})
		it('Informacoes nok - qtdeN invalido - array valor vazio', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieQtdeNArrayValorVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.qtdeN)
				expect(ret.msg).to.have.string(eMV_S.qtdeN)
				expect(ret.value).to.be.instanceof(Array)
		  		expect(ret.value).to.have.members(oC_S.serieQtdeNArrayValorVazio.qtdeN)
				done()
			})
		})
		it('Informacoes nok - qtdeN invalido - array valor ponto', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieQtdeNArrayValorPonto)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.qtdeN)
				expect(ret.msg).to.have.string(eMV_S.qtdeN)
				expect(ret.value).to.be.instanceof(Array)
				expect(ret.value).to.have.members(oC_S.serieQtdeNArrayValorPonto.qtdeN)
				done()
			})
		})
		it('Informacoes nok - qtdeN invalido - array valor virgula', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieQtdeNArrayValorVirgula)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.qtdeN)
				expect(ret.msg).to.have.string(eMV_S.qtdeN)
				expect(ret.value).to.be.instanceof(Array)
				expect(ret.value).to.have.members(oC_S.serieQtdeNArrayValorVirgula.qtdeN)
				done()
			})
		})
		it('Informacoes nok - gravN vazio', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieGravNVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.gravN)
				expect(ret.msg).to.have.string(eMV_S.gravN)
				expect(ret.value).to.have.string(oC_S.serieGravNVazio.gravN)
				done()
			})
		})
		it('Informacoes nok - gravN invalido - valor simples', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieGravNValorSimples)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.gravN)
				expect(ret.msg).to.have.string(eMV_S.gravN)
				expect(ret.value).to.have.string(oC_S.serieGravNValorSimples.gravN)
				done()
			})
		})
		it('Informacoes nok - gravN invalido - array valor vazio', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieGravNArrayValorVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.gravN)
				expect(ret.msg).to.have.string(eMV_S.gravN)
				expect(ret.value).to.be.instanceof(Array)
		  		expect(ret.value).to.have.members(oC_S.serieGravNArrayValorVazio.gravN)
				done()
			})
		})
		it('Informacoes nok - gravN invalido - array valor ponto', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieGravNArrayValorPonto)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.gravN)
				expect(ret.msg).to.have.string(eMV_S.gravN)
				expect(ret.value).to.be.instanceof(Array)
				expect(ret.value).to.have.members(oC_S.serieGravNArrayValorPonto.gravN)
				done()
			})
		})
		it('Informacoes nok - gravN invalido - array valor virgula', function(done) {
			chai.request(urlBase)
			.put(urlSerieTeste)
			.send(oUF_S.serieGravNArrayValorVirgula)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_S.param.gravN)
				expect(ret.msg).to.have.string(eMV_S.gravN)
				expect(ret.value).to.be.instanceof(Array)
				expect(ret.value).to.have.members(oC_S.serieGravNArrayValorVirgula.gravN)
				done()
			})
		})
		// dd_temp
		// dd_ep
		// dd_dia
		// imdb id
	})
	//
})
//
describe("Emissoras", function() {
	//
	describe("Criar uma emissora - createEmissora", function() {
		it('Informacoes ok', function(done) {
			chai.request(urlBase)
			.post(urlEmissoras)
			.send(oC_E.emissoraOk)
			.end(function(err, res) {
				idEmissoraTeste = res.body._id
				urlEmissoraTeste = `${urlEmissoras}/${idEmissoraTeste}` // montando a url pra usar nos testes de update e delete
				expect(res).to.have.status(201)
				expect(res.body).to.have.all.keys(['message', oM_E.param.id])
				expect(res.body.message).to.have.string(mR_E.e201)
				done()
			})
		})
		it('Informacoes nok - nome duplicado', function(done) {
			chai.request(urlBase)
			.post(urlEmissoras)
			.send(oC_E.emissoraOkDuplicate)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_E.e400duplikey)
				done()
			})
		})
		it('Informacoes nok - nome ausente', function(done) {
			chai.request(urlBase)
			.post(urlEmissoras)
			.send(oC_E.emissoraNomeAusente)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array2)
				expect(ret.param).to.have.string(oM_E.param.nome)
				expect(ret.msg).to.have.string(eMV_E.nome)
				done()
			})
		})
		it('Informacoes nok - nome vazio', function(done) {
			chai.request(urlBase)
			.post(urlEmissoras)
			.send(oC_E.emissoraNomeVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_E.param.nome)
				expect(ret.msg).to.have.string(eMV_E.nome)
				expect(ret.value).to.have.string(oC_E.emissoraNomeVazio.nome)
				done()
			})
		})
	})
	//
	describe("Recuperar todas as emissoras - getAllEmissoras", function() {
		it('Header == json', function(done) {
			chai.request(urlBase)
			.get(urlEmissoras)
			.end(function(err, res) {
				expect(res).to.be.json // header content-type = application/json
				done()
			})
		})
		it('Status == 200', function(done) {
			chai.request(urlBase)
			.get(urlEmissoras)
			.end(function(err, res) {
				expect(res).to.have.status(200)
				done()
			})
		})
		it('Body == Array', function(done) {
			chai.request(urlBase)
			.get(urlEmissoras)
			.end(function(err, res) {
				expect(res.body).to.be.instanceof(Array)
				done()
			})
		})
		it('Campos ok', function(done) {
			chai.request(urlBase)
			.get(urlEmissoras)
			.end(function(err, res) {
				expect(res).to.have.status(200)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(oM_E.arrayKeys)
				expect(ret).to.not.have.all.keys([oM_E.param.v])
				done()
			})
		})
	})
	//
	describe("Atualizar série com uma emissora", function() {
		it('Informacoes ok', function(done) {
			oU_E.emissoraUpdSerie.emissora = idEmissoraTeste
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oU_E.emissoraUpdSerie)
			.end(function(err, res) {
				expect(res).to.have.status(200)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_S.s200upd)
				done()
			})
		})
		it('Validar atualização', function(done) {
			chai.request(urlBase)
			.get(urlSerieTeste)
			.end(function(err, res) {
				expect(res).to.have.status(200)
				expect(res.body.emissora).to.have.string(oU_E.emissoraUpdSerie.emissora)
				done()
			})
		})
	})
	//
	describe("Alterar uma emissora - updEmissora", function() {
		it('Informacoes ok', function(done) {
			chai.request(urlBase)
			.put(urlEmissoraTeste)
			.send(oU_E.emissoraOk)
			.end(function(err, res) {
				expect(res).to.have.status(200)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_E.e200upd)
				done()
			})
		})
		it('Informacoes nok - nome ausente', function(done) {
			chai.request(urlBase)
			.put(urlEmissoraTeste)
			.send(oU_E.emissoraNomeAusente)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array2)
				expect(ret.param).to.have.string(oM_E.param.nome)
				expect(ret.msg).to.have.string(eMV_E.nome)
				done()
			})
		})
		it('Informacoes nok - nome vazio', function(done) {
			chai.request(urlBase)
			.put(urlEmissoraTeste)
			.send(oU_E.emissoraNomeVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_E.param.nome)
				expect(ret.msg).to.have.string(eMV_E.nome)
				expect(ret.value).to.have.string(oU_E.emissoraNomeVazio.nome)
				done()
			})
		})
	})
	//
	describe("Apagar uma emissora - delEmissora", function() {
		it('Emissora não encontrada', function(done) {
			var idEmissoraTeste404 = idEmissoraTeste.replace(/0/g, 'f').replace(/1/g, 2).replace(/2/g, 'b').replace(/3/g, 4).replace(/4/g, 'a')
			chai.request(urlBase)
			.delete(`${urlEmissoras}/${idEmissoraTeste404}`)
			.end(function(err, res) {
				expect(res).to.have.status(404)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_E.e404)
				done()
			})
		})
		it('Informacoes ok', function(done) {
			chai.request(urlBase)
			.delete(urlEmissoraTeste)
			.end(function(err, res) {
				expect(res).to.have.status(200)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_E.e200del)
				done()
			})
		})
		it('Validar atualização', function(done) {
			chai.request(urlBase)
			.get(urlSerieTeste)
			.end(function(err, res) {
				expect(res).to.have.status(200)
				expect(res.body.emissora).to.be.null
				done()
			})
		})
	})
	//
})
//
describe("Equipe de Legendas", function() {
	//
	describe("Criar uma equipe de legenda - createEquipeLegenda", function() {
		it('Informacoes ok', function(done) {
			chai.request(urlBase)
			.post(urlEquipeLegendas)
			.send(oC_EL.equipelegendaOk)
			.end(function(err, res) {
				idEquipeLegendaTeste = res.body._id
				urlEquipeLegendaTeste = `${urlEquipeLegendas}/${idEquipeLegendaTeste}` // montando a url pra usar nos testes de update e delete
				expect(res).to.have.status(201)
				expect(res.body).to.have.all.keys(['message', oM_EL.param.id])
				expect(res.body.message).to.have.string(mR_EL.el201)
				done()
			})
		})
		it('Informacoes nok - nome duplicado', function(done) {
			chai.request(urlBase)
			.post(urlEquipeLegendas)
			.send(oC_EL.equipelegendaOkDuplicate)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_EL.el400duplikey)
				done()
			})
		})
		it('Informacoes nok - nome ausente', function(done) {
			chai.request(urlBase)
			.post(urlEquipeLegendas)
			.send(oC_EL.equipelegendaNomeAusente)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array2)
				expect(ret.param).to.have.string(oM_EL.param.nome)
				expect(ret.msg).to.have.string(eMV_EL.nome)
				done()
			})
		})
		it('Informacoes nok - nome vazio', function(done) {
			chai.request(urlBase)
			.post(urlEquipeLegendas)
			.send(oC_EL.equipelegendaNomeVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_EL.param.nome)
				expect(ret.msg).to.have.string(eMV_EL.nome)
				expect(ret.value).to.have.string(oC_EL.equipelegendaNomeVazio.nome)
				done()
			})
		})
	})
	//
	describe("Recuperar todas as equipes de legenda - getAllEquipeLegendas", function() {
		it('Header == json', function(done) {
			chai.request(urlBase)
			.get(urlEquipeLegendas)
			.end(function(err, res) {
				expect(res).to.be.json // header content-type = application/json
				done()
			})
		})
		it('Status == 200', function(done) {
			chai.request(urlBase)
			.get(urlEquipeLegendas)
			.end(function(err, res) {
				expect(res).to.have.status(200)
				done()
			})
		})
		it('Body == Array', function(done) {
			chai.request(urlBase)
			.get(urlEquipeLegendas)
			.end(function(err, res) {
				expect(res.body).to.be.instanceof(Array)
				done()
			})
		})
		it('Campos ok', function(done) {
			chai.request(urlBase)
			.get(urlEquipeLegendas)
			.end(function(err, res) {
				expect(res).to.have.status(200)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(oM_EL.arrayKeys)
				expect(ret).to.not.have.all.keys([oM_EL.param.v])
				expect(ret.nomeUP).to.be.equal(ret.nome.toUpperCase())
				done()
			})
		})
	})
	//
	describe("Atualizar série com uma equipe de legenda", function() {
		it('Informacoes ok', function(done) {
			oU_EL.equipelegendaUpdSerie.eq_leg = idEquipeLegendaTeste
			oU_EL.equipelegendaUpdSerie.eq_leg_parc = idEquipeLegendaTeste
			chai.request(urlBase)
			.patch(urlSerieTeste)
			.send(oU_EL.equipelegendaUpdSerie)
			.end(function(err, res) {
				expect(res).to.have.status(200)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_S.s200upd)
				done()
			})
		})
		it('Validar atualização', function(done) {
			chai.request(urlBase)
			.get(urlSerieTeste)
			.end(function(err, res) {
				expect(res).to.have.status(200)
				expect(res.body.eq_leg).to.have.string(oU_EL.equipelegendaUpdSerie.eq_leg)
				expect(res.body.eq_leg_parc).to.have.string(oU_EL.equipelegendaUpdSerie.eq_leg_parc)
				done()
			})
		})
	})
	//
	describe("Alterar uma equipe de legenda - updEquipeLegenda", function() {
		it('Informacoes ok', function(done) {
			chai.request(urlBase)
			.put(urlEquipeLegendaTeste)
			.send(oU_EL.equipelegendaOk)
			.end(function(err, res) {
				expect(res).to.have.status(200)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_EL.el200upd)
				done()
			})
		})
		it('Informacoes nok - nome ausente', function(done) {
			chai.request(urlBase)
			.put(urlEquipeLegendaTeste)
			.send(oU_EL.equipelegendaNomeAusente)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array2)
				expect(ret.param).to.have.string(oM_EL.param.nome)
				expect(ret.msg).to.have.string(eMV_EL.nome)
				done()
			})
		})
		it('Informacoes nok - nome vazio', function(done) {
			chai.request(urlBase)
			.put(urlEquipeLegendaTeste)
			.send(oU_EL.equipelegendaNomeVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oM_EL.param.nome)
				expect(ret.msg).to.have.string(eMV_EL.nome)
				expect(ret.value).to.have.string(oU_EL.equipelegendaNomeVazio.nome)
				done()
			})
		})
	})
	//
	describe("Apagar uma equipe de legenda - delEquipeLegenda", function() {
		it('Equipe de Legenda não encontrada', function(done) {
			var idEquipeLegendaTeste404 = idEquipeLegendaTeste.replace(/0/g, 'f').replace(/1/g, 2).replace(/2/g, 'b').replace(/3/g, 4).replace(/4/g, 'a')
			chai.request(urlBase)
			.delete(`${urlEquipeLegendas}/${idEquipeLegendaTeste404}`)
			.end(function(err, res) {
				expect(res).to.have.status(404)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_EL.el404)
				done()
			})
		})
		it('Informacoes ok', function(done) {
			chai.request(urlBase)
			.delete(urlEquipeLegendaTeste)
			.end(function(err, res) {
				expect(res).to.have.status(200)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_EL.el200del)
				done()
			})
		})
		it('Validar atualização', function(done) {
			chai.request(urlBase)
			.get(urlSerieTeste)
			.end(function(err, res) {
				expect(res).to.have.status(200)
				expect(res.body.eq_leg).to.be.null
				expect(res.body.eq_leg_parc).to.be.null
				done()
			})
		})
	})
	//
})
//
describe("Séries", function() {
	describe("Apagar uma serie - delSerie", function() {
		it('Série não encontrada', function(done) {
			var idSerieTeste404 = idSerieTeste.replace(/0/g, 'f').replace(/1/g, 2).replace(/2/g, 'b').replace(/3/g, 4).replace(/4/g, 'a')
			chai.request(urlBase)
			.delete(`${urlSeries}/${idSerieTeste404}`)
			.end(function(err, res) {
				expect(res).to.have.status(404)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_S.s404)
				done()
			})
		})
		it('Informacoes ok - todos os campos', function(done) {
			chai.request(urlBase)
			.delete(`${urlSeries}/${idSerieTeste}`)
			.end(function(err, res) {
				expect(res).to.have.status(200)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_S.s200del)
				done()
			})
		})
	})	
})


describe("Exemplo", function() {
	
})

